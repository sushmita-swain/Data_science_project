
The game state is mainly stored as a 2D list of strings, and most of the processing is thus done on a list of strings.
The GUI takes the current state and displays it on the screen. The GUI allows drag and drop movement of pieces,click-click movement and voice movement.

 The AI that plays against the human evaluates all possible moves made by either
 player up to a certain level of depth. The AI evaluates each position by giving
 it a score. The higher the value of the score, the more favourable a position
 is for white and the lower the value of the score, the more favourable the
 position is for black. Knowing that white will try to get the score to be higher
 and black will try and get the score to be lower, the AI assumes best play from
 either side as it traverses up the search tree and chooses the best move to be
 played. A problem that may arise is the number of postions that need to be
 evaulated. Even at 3 levels of depth, thousands of positions have to be
 evaluatd.
 Several methods are used in this program to reduce positions that are searched:
 1. Alpha-beta pruning: As a result of  evaluating a position it can be found
 that a portion of the search tree can be ignored as no further evaluations can
 guarantee better results. This can happen because white and black area against
 one another. White plays what is best for it and black plays what is best for it,
 so it would make sense for white to ignore any portion of the tree where black
 has a clear upperhand that it can choose to play.
 2. Transposition table: Often, two different pathways in a search tree can result
 in the same board being evaluated. Instead of evaluating the same board several
 times, the program stores a table of values in a dictionary where the keys are
 the positions. This way, repeated positions can have their evaluations looked up
 fairly quickly, as the board state is hashed.
 3. Opening Book - The opening book is again a dictionary that stores board
 positions often seen in the beginning few moves in chess. Appropraite moves that
 can be played at such positions is stored in the dictionary. A random move is
 selected and played from the list of suggested moves wihtout searching if the AI
 finds itself confronting a such a board postion. Note that this opening book was
 recorded by myself and so it does not have many positions stored in it.

 In order to traverse the search tree as above, the AI needs to know how to evaluate the
 board at any position to decide if white or black has the advantage. My evaluation
 function currently looks at three main things when evaluating the board:
    a) Material for white and black. Each piece has a value and the more pieces you have,
        the better off your position is likely to be. For example, if white has an extra
        queen, it has an advantage over black.
    b) Piece-square table values - for each piece, there is a table that stores the best
        squares that the particular piece should occupy. So if white has a knight at a
       good square that controls the centre of the board, whereas black has a knight
        at the corner of the board, the situation is evaluated as being more favourable
        for white.
    c) Reduction in points for doubled pawns, isolated pawns, and blocked pawns. If any
        side has a set of pawns with the above features their points are slightly lower
        to indicate a slight disadvantage in such a position.
    d) A checkmate: a position where this has occured gets a very high point, so that the
      AI moves towards this if it can. (or avoids it).
